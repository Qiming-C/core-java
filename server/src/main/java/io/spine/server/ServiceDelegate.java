/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.server;

import com.google.common.collect.ImmutableCollection;
import io.grpc.BindableService;
import io.grpc.stub.StreamObserver;
import io.spine.logging.Logging;
import io.spine.type.TypeUrl;

import java.util.Optional;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * An abstract base for classes implementing server-side services.
 *
 * <p>This class implements a {@linkplain #serve(Object, StreamObserver) common way}
 * services work. Initially, each request is checked not to be for an unpublished part
 * of the domain language. In such a case, an error is returned.
 *
 * <p>Then, a service attempts to find a bounded context which would handle
 * the request. If not found, an error returned. Otherwise, the request is
 * {@linkplain #serve(BoundedContext, Object, StreamObserver) dispatched} to the bounded context.
 *
 * @param <T>
 *         the type of the request handled by the service
 * @param <R>
 *         the type of the response the service sends to the client
 * @implNote A service implementation is arranged using delegation because service classes
 *         have to extend from abstract base classes generated by gRPC. Since we don't have multiple
 *         inheritance in Java, we use the delegation.
 */
abstract class ServiceDelegate<T, R> implements Logging {

    private final BindableService service;
    private final TypeDictionary types;

    /**
     * Creates a new instance with the reference to the parent service and served types.
     */
    ServiceDelegate(BindableService service, TypeDictionary types) {
        this.service = checkNotNull(service);
        this.types = checkNotNull(types);
    }

    /**
     * Handles the posted request.
     */
    final void serve(T request, StreamObserver<R> observer) {
        if (detectInternal(request)) {
            handleInternal(request, observer);
            return;
        }
        var type = enclosedMessageType(request);
        var boundedContext = find(type);
        boundedContext.ifPresentOrElse(
            ctx -> serve(ctx, request, observer),
            () -> handleUnsupported(request, observer)
        );
    }

    /**
     * Obtains the type of the message enclosed into the request.
     */
    protected abstract TypeUrl enclosedMessageType(T request);

    protected abstract void serve(BoundedContext context, T request, StreamObserver<R> observer);

    protected abstract boolean detectInternal(T request);

    protected abstract void handleInternal(T request, StreamObserver<R> observer);

    protected abstract void handleUnsupported(T request, StreamObserver<R> observer);

    final Optional<BoundedContext> find(TypeUrl type) {
        return types.find(type);
    }

    final String serviceName() {
        var result = service.getClass().getSimpleName();
        return result;
    }

    final ImmutableCollection<BoundedContext> contexts() {
        return types.contexts();
    }
}
