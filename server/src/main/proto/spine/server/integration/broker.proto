/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.server.integration;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.server.integration";
option java_multiple_files = true;
option java_outer_classname = "BrokerProto";

import "google/protobuf/any.proto";

import "spine/core/actor_context.proto";
import "spine/core/bounded_context.proto";

// A wrapper around a message, which is used to send/receive the original message
// to/from external application components, such as other bounded contexts.
message ExternalMessage {

    // An ID of the original message wrapped to `Any` (e.g. an event ID).
    google.protobuf.Any id = 1 [(required) = true];

    // An original message wrapped to `Any` (e.g. a wrapped instance of `io.spine.core.Event`).
    google.protobuf.Any original_message = 2 [(required) = true];

    // Information about the environment of the user who created the original message.
    spine.core.ActorContext actor_context = 3 [(required) = true];

    // Name of the bounded context, within which an original message was created.
    spine.core.BoundedContextName bounded_context_name = 4 [(required) = true];
}

// A document message, describing types of events,
// that are required for consumption by some part of the system.
//
// One of the typical scenarios is a notification shout-out from the current bounded context
// to other bounded contexts of the application about its `external` subscription needs.
//
message ExternalEventsWanted {

    // Multiple types may be requested at a time.
    repeated ExternalEventType type = 1;
}

// The type of a domain event which is emitted by one bounded context and consumed by
// other bounded contexts as "external" event
message ExternalEventType {
    option (is).java_type = "ExternalEventTypeMixin";

    // Type URL of the domain event (e.g. `io.spine.examples.TaskCreated`).
    string type_url = 1 [(required) = true];
}

// The type of error, that may occur during the `ExternalMessage` validation.
enum ExternalMessageValidationError {

    // Reserved value.
    EM_UNKNOWN_REASON = 0;

    // The external message type is not supported by the server.
    UNSUPPORTED_EXTERNAL_MESSAGE = 1;
}

// Tells that some bounded context is connected to the shared transport.
//
// Used to notify other parties connected to the same transport that the external events they
// might need may be provided by the bounded context that is online.
//
// Typically, once others receive this message, they might want to send their
// respective `ExternalEventsWanted` messages to see if the connected bounded context
// is able to provide them.
//
// Please note this message does not signify that some context has _just_ connected
// to the transport. It may be sent by some context which has been using the shared transport
// for quite some time â€” in which case this message may serve to notify just-connected bounded
// contexts of its existence.
//
message BoundedContextOnline {

    // The name of the bounded context which is connected to the transport.
    spine.core.BoundedContextName context = 1 [(required) = true];
}
