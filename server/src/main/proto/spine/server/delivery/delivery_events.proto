/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.server.delivery;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;
option (every_is).java_type = "io.spine.server.delivery.ShardEvent";

option java_package = "io.spine.server.delivery.event";
option java_outer_classname = "DeliveryEventsProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";

import "spine/server/delivery/delivery.proto";
import "spine/server/catchup/catch_up.proto";

// The processing of the messages in the particular shard was requested by the framework.
message ShardProcessingRequested {

    ShardIndex index = 1 [(required) = true, (validate) = true];

    // The run-time data of the delivery at the moment when this event has been dispatched.
    DeliveryRunInfo run_info = 2;

    // An identifier of a `CatchUp` process in scope of which the shard processing
    // was originally requested.
    //
    catchup.CatchUpId process = 3 [(required) = true];
}

// The processing of the messages in the particular shard was performed
message ShardProcessed {

    ShardIndex index = 1 [(required) = true, (validate) = true];

    // The run-time data of the delivery at the moment when the shard was processed.
    DeliveryRunInfo run_info = 2;

    // An identifier of a `CatchUp` process in scope of which the shard processing
    // was originally requested.
    //
    catchup.CatchUpId process = 3 [(required) = true];
}
